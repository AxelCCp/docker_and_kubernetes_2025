---docker build -t i-usuarios . -f .\ms-usuarios-server\Dockerfiledocker run -p 8001:8001 --rm -it i-usuarios /bin/shdocker run -p 8001:8001 -d --rm --name ms-usuarios-server --network spring usuariosdocker run -d -p 3307:3306 --name mysql8 --network spring -e MYSQL_ROOT_PASSWORD=sasa -e MYSQL_DATABASE=db-ms-docker-kube mysql:8docker run -p 5532:5432 --name postgres14 --network spring -e POSTGRES_PASSWORD=sasa -e POSTGRES_DB=db-ms-docker-kube -d postgres:14-alpinedocker run -d -p 8001:8001 --rm --name ms-usuarios-server --network spring i-usuarios:v2docker run -d -p 8002:8002 --rm --name ms-cursos-server --network spring i-cursos:v2---volumenes:docker run -d -p 3307:3306 --name mysql8 --network spring -e MYSQL_ROOT_PASSWORD=sasa -e MYSQL_DATABASE=db-ms-docker-kube -v data-mysql:/var/lib/mysql --restart=always mysql:8docker run -p 5532:5432 --name postgres14 --network spring -e POSTGRES_PASSWORD=sasa -e POSTGRES_DB=db-ms-docker-kube -d -v data-postgres:/var/lib/postgresql/data --restart=always postgres:14-alpine---contenedoresdocker run -d -p 8001:8001 --rm --name ms-usuarios-server --network spring i-usuarios:v2docker run -d -p 8002:8002 --rm --name ms-cursos-server --network spring i-cursos:v2---contenedores - sobreescribir env portdocker run -d -p 8001:8090 --env PORT=8090 --rm --name ms-usuarios-server --network spring i-usuariosdocker run -d -p 8001:8001 --env PORT=8090 --rm --name ms-usuarios-server --network spring i-usuarios#usa archivo .envdocker run -d -p 8001:8001 --env-file .\ms-usuarios-server.env --rm --name ms-usuarios-server --network spring i-usuariosdocker run -d -p 8002:8002 --env-file .\ms-cursos-server.env --rm --name ms-cursos-server --network spring i-cursos---imagenesdocker build -t i-cursos . -f .\ms-cursos-server\Dockerfiledocker build -t i-usuarios . -f .\ms-usuarios-server\Dockerfile--en la construccion de la img se pasa el puerto por argumento al dockerfile, por defecto es 8001docker build -t i-usuarios . -f .\ms-usuarios-server\Dockerfile --build-arg PORT_APP=8080::::::::::::::::::::::::::::::::::::::--------------DOCKER COMPOSE--------------docker-compose up -ddocker-compose downdocker-compose up --build -d------------------#ver los volumenes------------------docker volume ls ----------------------#elimina los volumenes:----------------------docker-compose down -v    ---::::::::::::::::::::::::::::::::::::::----------Docker hub----------Crear nueva imagen para docker hubdocker build -t 4xe1/i-cursos . -f .\ms-cursos-server\Dockerfiledocker build -t 4xe1/i-usuarios . -f .\ms-usuarios-server\Dockerfile---clonar imagenes ya existentes para docker hubdocker tag i-usuarios 4xe1/i-usuariosdocker tag i-cursos 4xe1/i-cursospushdocker push 4xe1/i-usuariosdocker push 4xe1/i-cursospulldocker pull 4xe1/i-usuariosdocker pull 4xe1/i-cursosrundocker run -d -p 3307:3306 --name mysql8 --network spring -e MYSQL_ROOT_PASSWORD=sasa -e MYSQL_DATABASE=db-ms-docker-kube mysql:8docker run -p 5532:5432 --name postgres14 --network spring -e POSTGRES_PASSWORD=sasa -e POSTGRES_DB=db-ms-docker-kube -d postgres:14-alpinedocker run -d -p 8001:8001 --rm --name ms-usuarios-server --network spring 4xe1/i-usuariosdocker run -d -p 8002:8002 --rm --name ms-cursos-server --network spring i-cursos:v2:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::----------KUBERNETES----------kubectl helpminikube start --driver=dockerminikube stopminikube statusminikube status----------deployment----------kubectl create deployment mysql8 --image=mysql:8 --port=3306kubectl get deploymentskubectl get podskubectl describe pods mysql8-59db65578b-k7hrdkubectl logs mysql8-59db65578b-k7hrdkubectl get deploykubectl delete deployment mysql8crea archivo deployment.......................kubectl create deployment mysql8 --image=mysql:8 --port=3306 --dry-run=client -o yaml > deployment-mysql8.yamlkubectl apply -f .\deployment-mysql8.yamlkubectl get podskubectl describe pods mysql8-bddf7f8c4-7bzm6kubectl expose deployment mysql8 --port=3306 --type=ClusterIPkubectl get serviceskubectl describe service mysql8kubectl logs ms-usuarios-server-56b8dd8f47-zzxpnx---kubectl create deployment ms-usuarios-server --image=4xe1/i-usuarios:latest --port=8001kubectl create deployment usuarios --image=4xe1/usuarios:latest --port=8001kubectl get deploymentskubectl get podslogs error:kubectl get pods -l app=ms-usuarios-serverkubectl logs ms-usuarios-server-66775776d7-qwxjlx---kubectl expose deployment ms-usuarios-server --port=8001 --type=LoadBalancerobten la ip de cluster......................minikube service ms-usuarios-server --urlhttp://127.0.0.1:57540/listaractualizar imagen de un contenedor..................................docker tag 4xe1/i-usuarios 4xe1/i-usuarios:v2docker push 4xe1/i-usuarios:v2kubectl get podskubectl describe pods ms-usuarios-server-85bc95b984-nsh5k i-usuarios : nombre del container.escalar numero de pods con ms-usuarios-server...................kubectl scale deployment ms-usuarios-server --replicas=3:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::Configuraciones declarativas con kubernetes -------------------------------------------obtener el yaml del servicio de mysql.....................................kubectl get service mysql8 -o yamlobtener la informaciÃ³n del servicio y guardarla en un archivo..............................................................kubectl get service mysql8 -o yaml > svc-mysql.yamlver deployment de ms-usuarios-service.....................................kubectl get deployment ms-usuarios-server -o yamlcrear deployment de ms-usuarios-server......................................kubectl create deployment ms-usuarios-server --port=8001 --image=4xe1/i-usuarios:latest --dry-run=client -o yaml > deployment-usuarios.yamlcrear archivo de servicio de ms-usuarios-server...............................................kubectl get service ms-usuarios-server -o yaml > svc-usuarios.yamleliminar un deployment - modo imperativo........................................kubectl delete deployment ms-usuarios-servereliminar un deployment - modo declarativo.........................................kubectl delete -f .\deployment-usuarios.yamlse aplica el archivo de configuracion de deployment de ms-usuarios-server.........................................................................kubectl apply -f .\deployment-usuarios.yamlkubectl get deployments(si se actualiza el deployment , solo hay q usar el comando apply para actualizar el despliegue).kubectl get podskubectl describe service ms-usuarios-server>>>>>>>>>>>>>>>>>>>>>>>>interfaz grafica para administrar podsminikube dashboard>>>>>>>>>>>>>>>>>>>>>>>>despliegue de deploy y servicio de postgres...........................................kubectl apply -f .\deployment-postgres.yaml -f .\svc-postgres.yamlkubectl get deployments kubectl get podskubectl get servicesdespliegue de deploy y servicio de cursos.........................................docker build -t 4xe1/i-cursos:latest . -f .\ms-cursos-server\Dockerfiledocker push 4xe1/i-cursos:latestkubectl apply -f .\deployment-cursos.yaml -f .\svc-cursos.yamlkubectl get deployments kubectl get podskubectl get services          env:            - name: PORT              value: 8002            - name: DB_HOST              value: postgres14:5432            - name: DB_DATABASE              value: db-ms-docker-kube            - name: DB_USERNAME              value: postgres            - name: DB_PASSWORD              value: sasa            - name: USUARIOS_URL              value: ms-usuarios-server:8001